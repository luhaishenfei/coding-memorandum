redis

keys *  查看所有key name


update t0_shelf_prop_tag_relation re INNER JOIN t0_prop_tag_mst pr on re.prop_tag_name=pr.prop_tag_name set re.prop_tag_id=pr.id



增insert删delete改update查select
 update 更新   alter  改变 

 
创建数据库          create database 数据库;

查看指定数据库   show create database 数据库;

查看数据库(所有的) show databases;

修改数据库编码    alter database 数据库 default character set  新编码方式 collate 新编码方式_bin;

使用数据库          use db

删除数据库          drop database 数据库；（不能一次删除多个！）

 

创建表                 create table 表名(列名 数据类型 [not null] [primary key],列名 数据类型 [not null],..) 

查看所有表           show tables

查看一个表数据     select * from 表名        *代表所有列  也可以select  列名 from 表名
	1.基础查询	
			SELECT 
				NAME,
				AGE
			FROM
				表名

			-- DISTINCT 去除重复的结果集 	
			SELECT DISTINCT sex FROM 表明
			
			-- 将math和English成绩相加再显示出来
			SELECT  NAME,math,english,math+english from student;
			-- IFNULL 如果有null 其参与的运算都为null  用IFNULL（English为例） 则将null替换成0计算
			SELECT  NAME,math,english,math+IFNULL(english,0) from student;
			
			-- AS 起别名
			SELECT  NAME,math,english,math+IFNULL(english,0) AS 总分 from student;
			-- 可以用空字符（空格）取代AS
			SELECT  NAME,math 数学,english 英语,math+IFNULL(english,0) 总分 from student;
			
	
	2.条件查询
		-- WHERE
		SELECT * FROM student WHERE age>=20;
		-- 不等于 != 和<>
		SELECT * FROM student WHERE age != 55;	
		SELECT * FROM student WHERE age <> 55;	
		-- AND 查询 55<age<70
		SELECT * FROM student WHERE age > 55 and age <70;
		-- BETWEEN	查询 55<age<70
		SELECT * FROM student WHERE age BETWEEN 55 AND 70;
		
		-- OR 查询年龄55或者70的
		SELECT * FROM student WHERE age = 55 OR age = 70;
		-- IN 
		SELECT * FROM student WHERE age IN(55,70);
		
		-- IS NULL值用IS判断 不能使用= (!=) 判断
		SELECT * FROM student WHERE english IS NULL; 
		-- IS NOT 查询英语不是NULL的
		SELECT * FROM student WHERE english IS NOT NULL; 
		
		-- LIKE 模糊查询
			占位符：
				_ :单个任意字符;
				% :多个任意字符;
		-- _ 只能查到如 马云 马竟 不能查到 马化腾 马金凤
		SELECT * FROM student WHERE NAME LIKE '马_';
		-- % 所有 马 开头的都能查到 马达加斯加  马拉力单人赛车
		SELECT * FROM student WHERE NAME LIKE '马%';
		
	3.排序查询
		-- ORDER BY  按math大小排序
		SELECT * FROM student ORDER BY math;
		1.排序方式
			ASC: 升序，默认的
			DESC:降序
			SELECT * FROM student ORDER BY math DESC,english DESC;
	4.聚合函数：将一列数据作为一个整体，进行纵向的计算
	    注意：聚合函数的计算，排除NULL的值
		解决方案：	
			1.选择非空的列进行计算(如 主键)
			2.count(*) //*不推荐
			或者添加IFNULL
			SELECT COUNT(IFNULL(english,0)) FROM student;
		 
		1.count:计算个数
		    SELECT COUNT(NAME) FROM student;
			
		2.max:计算最大值
			SELECT MAX(math) FROM student;
		3.min:计算最小值
			SELECT MIN(math) FROM student;
		4.sum:计算和
			SELECT SUM(math) FROM student;
		5.avg:计算平均值
			SELECT AVG(math) FROM student;
	
	5.分组查询
		-- GROUP BY 分组字段
		注意：分组之后查询的字段：分组字段(列子中sex）、聚合函数
		SELECT sex,AVG(math),COUNT(id) FROM student GROUP BY sex;
		
			-- 分数低于70的人，不参与分组
			SELECT sex,AVG(math),COUNT(id) FROM student WHERE math>70 GROUP BY sex;
		
		-- HAVING 分数低于70的人，不参与分组,且分组后要大于2个人
		SELECT sex,AVG(math),COUNT(id) FROM student WHERE math>70 GROUP BY sex HAVING COUNT(id)>2;
		优化：AS可以省略掉	
			SELECT sex,AVG(math),COUNT(id) AS 人数 FROM student WHERE math>40 GROUP BY sex HAVING 人数  >2;
		注意：WHERE和HAVING的区别
		    1.WHERE在分组之前进行限定，如果不满足条件，则不参与分组；
			 HAVING在分组之后进行限定，如果不满足结果，则不会被查询出来
			2.WHERE后不可以跟聚合函数，HAVING可以进行聚合函数的判断
	
	
	6.分页查询：
		-- LIMIT 开始的索引，每页查询的条数；
		-- 每页显示3条 从0开始；
		SELECT * FRom student LIMIT 0,3; -- 第1页
		SELECT * FRom student LIMIT 3,3; -- 第2页
		-- 公式:开始的索引=（当前的页码-1）*每页显示的条数
		
		分页操作是一个“方言” 不同数据库分页语句不相同
		
		
多表关系 
	-- 部门和员工
	一对多：在多的一方建立外键，指向一的一方的主键
	
	-- 学生和课程
	多对多：多对多关系实现需要借助第三方中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键
	
	-- 人和身份证
	一对一：可以在任意一方添加唯一外键指向另一方的主键。



删除表           drop table 表名

更改表名         rename table 旧表名 to 新表名

 

增加表内容 插入数据     insert  into  表名（列名，列名...）values（值，值...）
		   insert  into  表名（列名，列名...）select (列名，列名...) from 表2 

修改列中的一条记录      update  表名  set   列=值   where   列=值   

删除列中的一条记录      delete  from  表名   where   列=值  

 

增加一个列                  Alter table 表名 add 列名 数据类型

删除一个列                  Alter table 表名 drop column 列名 

修改一个列名              Alter table  表名 change 列名  新列名 数据类型;

 

desc 降序排列

asc   升序排列

约束:对表中的数据进行限定，保证数据的正确性、有效性、完整性。
	1.主键约束：primary key
	2.非空约束：not null
	3.唯一约束：unique
	4.外键约束：foreign key
	
	主键约束：primary key
	注意：1.含义：非空且唯一
		  2.一张表只能有一个字段为主键
		  3.主键就是表中记录的唯一标识
		  
		1.创建表时添加主键约束
		CREATE TABLE stu(
			id INT PRIMARY KEY,
			NAME VARCHAR(20)
		);
		2.创建表完成后，添加主键
		ALTER TABLE stu MODIFY id INT PRIMARY KEY;
		
		3.删除主键
		ALTER TABLE stu DROP PRIMARY KEY;
		
		4.自动增长
			4.1概念：如果某一列是数值类型的，使用auto_increment可以来完成值的自动增长
			4.2在创建表时添加主键约束，并且完成主键自动增长
			CREATE TABLE stu(
				id INT PRIMARY KEY auto_increment,
				NAME VARCHAR(20)
			);
			-- 值是主键后 就可以将主键值添加为NULL 让其自动增长
			insert into stu values(NULL,'aaa');				
			4.3添加自动增长
			ALTER TABLE stu MODIFY id INT auto_increment;
			4.4删除自动增长
			ALTER TABLE stu MODIFY id INT;
			
	
	非空约束：not null
		1.创建表时添加约束
		CREATE TABLE stu(
			id INT,
			NAME VARCHAR(20) NOT NULL -- name为非空
		);
		2.创建表完成后，添加非空约束
		ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;
	    3.删除name的非空约束
		ALTER TABLE stu MODIFY NAME VARCHAR(20);
		
	唯一约束：unique
		注意：唯一约束可以有NULL，但是一列只能有一个为NULL
		1.创建表时添加约束
		CREATE TABLE stu(
			id INT,
			phone_number VARCHAR(20) UNIQUE 
		);
		2.创建表完成后，添加唯一约束
		ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;
		
		3.删除唯一约束
		ALTER TABLE stu DROP INDEX phone_number;
		
		
多表

范式



 

delete 删除记录  结构依然存在   即还可以找到   执行后有提交过程

drop   结构和数据都删除     一步操作完成

SELECT * FROM `t13_off_shelf_copy_copy1` where createby like '朱%'
SELECT * FROM `t13_off_shelf_copy_copy1` where createby like '朱__'




PS:

mysql8.0
	-- 忘记root密码
	mysqld -remove mysql

	mysqld --initialize-insecure --user=mysql

	mysqld --install mysql --defaults-file=D:\mysql\mysql-8.0.27-winx64\my.ini
		
	-- 跳过登录密码验证	
	mysqld --console --skip-grant-tables --shared-memory   

798540   250281


oracle 
  user:  Scott password:  tiger

分页 where rownum > 30

1.在创建用户之前，先要创建表空间：
其格式为：格式: create tablespace 表间名 datafile ‘数据文件名’ size 表空间大小;

例如：  

SQL> create tablespace mytable datafile 'd:\myoracle\mytables1.dbf' size 1024M s
